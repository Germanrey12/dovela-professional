# ============================================================================
# DOVELA DIAMANTE - PROFESSIONAL APPLICATION LAUNCHER
# ============================================================================
# Script de lanzamiento profesional para la aplicaci√≥n de an√°lisis de dovelas
# Autor: Sistema de Desarrollo Automatizado
# Fecha: Septiembre 3, 2025
# Versi√≥n: 2.0 Professional
# ============================================================================

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("gui", "console", "test", "legacy", "help")]
    [string]$Mode = "menu",
    
    [Parameter(Mandatory=$false)]
    [switch]$Verbose,
    
    [Parameter(Mandatory=$false)]
    [switch]$NoVenv
)

# Configuraci√≥n de colores para output profesional
$Host.UI.RawUI.WindowTitle = "Dovela Diamante - Professional Analysis Tool"

# Funciones de utilidad para output con colores
function Write-Header {
    param([string]$Text)
    Write-Host "`n" -NoNewline
    Write-Host "=" * 80 -ForegroundColor Cyan
    Write-Host "  $Text" -ForegroundColor Yellow -BackgroundColor DarkBlue
    Write-Host "=" * 80 -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Text)
    Write-Host "‚úÖ $Text" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Text)
    Write-Host "‚ö†Ô∏è  $Text" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Text)
    Write-Host "‚ùå $Text" -ForegroundColor Red
}

function Write-Info {
    param([string]$Text)
    Write-Host "‚ÑπÔ∏è  $Text" -ForegroundColor Cyan
}

function Write-Progress {
    param([string]$Text)
    Write-Host "‚ö° $Text" -ForegroundColor Magenta
}

# Funci√≥n para verificar dependencias
function Test-Dependencies {
    Write-Progress "Verificando dependencias del sistema..."
    
    # Verificar Python
    try {
        $pythonVersion = python --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Python encontrado: $pythonVersion"
        } else {
            throw "Python no encontrado"
        }
    } catch {
        Write-Error "Python no est√° instalado o no est√° en el PATH"
        Write-Info "Instale Python desde https://python.org"
        return $false
    }
    
    # Verificar estructura del proyecto
    $requiredPaths = @(
        "src\main.py",
        "src\config\settings.py",
        "src\core\geometry.py",
        "src\gui\main_window.py"
    )
    
    foreach ($path in $requiredPaths) {
        if (-not (Test-Path $path)) {
            Write-Error "Archivo requerido no encontrado: $path"
            return $false
        }
    }
    
    Write-Success "Estructura del proyecto verificada"
    return $true
}

# Funci√≥n para configurar entorno virtual
function Initialize-VirtualEnvironment {
    if ($NoVenv) {
        Write-Info "Saltando configuraci√≥n de entorno virtual (--NoVenv especificado)"
        return $true
    }
    
    Write-Progress "Configurando entorno virtual..."
    
    # Verificar si existe el entorno virtual
    if (-not (Test-Path ".venv")) {
        Write-Info "Creando entorno virtual..."
        python -m venv .venv
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Error al crear entorno virtual"
            return $false
        }
        Write-Success "Entorno virtual creado"
    }
    
    # Activar entorno virtual
    $activateScript = ".venv\Scripts\Activate.ps1"
    if (Test-Path $activateScript) {
        Write-Info "Activando entorno virtual..."
        & $activateScript
        Write-Success "Entorno virtual activado"
    } else {
        Write-Warning "Script de activaci√≥n no encontrado, usando Python del sistema"
    }
    
    # Instalar dependencias si es necesario
    if (Test-Path "requirements.txt") {
        Write-Info "Verificando dependencias de Python..."
        pip install -r requirements.txt --quiet
        if ($LASTEXITCODE -eq 0) {
            Write-Success "Dependencias verificadas/instaladas"
        } else {
            Write-Warning "Algunas dependencias podr√≠an no haberse instalado correctamente"
        }
    }
    
    return $true
}

# Funci√≥n para mostrar men√∫ interactivo
function Show-InteractiveMenu {
    Write-Header "DOVELA DIAMANTE - AN√ÅLISIS PROFESIONAL DE ESTRUCTURAS"
    
    Write-Host "`nüèóÔ∏è  OPCIONES DISPONIBLES:" -ForegroundColor Yellow
    Write-Host "   1. üñ•Ô∏è  Interfaz Gr√°fica (GUI) - Recomendado" -ForegroundColor Green
    Write-Host "   2. üíª Modo Consola (Testing)" -ForegroundColor Cyan  
    Write-Host "   3. üß™ Pruebas de Validaci√≥n" -ForegroundColor Magenta
    Write-Host "   4. üìú Aplicaci√≥n Legacy (Original)" -ForegroundColor Yellow
    Write-Host "   5. üìñ Informaci√≥n del Sistema" -ForegroundColor Blue
    Write-Host "   6. üö™ Salir" -ForegroundColor Red
    
    Write-Host "`n" -NoNewline
    $choice = Read-Host "Seleccione una opci√≥n (1-6)"
    
    switch ($choice) {
        "1" { return "gui" }
        "2" { return "console" }
        "3" { return "test" }
        "4" { return "legacy" }
        "5" { return "info" }
        "6" { return "exit" }
        default { 
            Write-Warning "Opci√≥n inv√°lida. Seleccionando interfaz gr√°fica por defecto."
            return "gui" 
        }
    }
}

# Funci√≥n para ejecutar la aplicaci√≥n
function Start-Application {
    param([string]$ExecutionMode)
    
    switch ($ExecutionMode) {
        "gui" {
            Write-Header "INICIANDO INTERFAZ GR√ÅFICA"
            Write-Progress "Cargando aplicaci√≥n moderna..."
            python src\main.py
        }
        
        "console" {
            Write-Header "INICIANDO MODO CONSOLA"
            Write-Progress "Ejecutando an√°lisis en consola..."
            python src\main.py console
        }
        
        "test" {
            Write-Header "EJECUTANDO PRUEBAS DE VALIDACI√ìN"
            Write-Progress "Corriendo tests autom√°ticos..."
            python src\main.py test
        }
        
        "legacy" {
            Write-Header "INICIANDO APLICACI√ìN LEGACY"
            Write-Progress "Cargando versi√≥n original..."
            if (Test-Path "deflexion_gui_complete.py") {
                python deflexion_gui_complete.py
            } else {
                Write-Error "Archivo legacy no encontrado: deflexion_gui_complete.py"
                return $false
            }
        }
        
        "info" {
            Show-SystemInfo
            return $true
        }
        
        "exit" {
            Write-Info "Saliendo de la aplicaci√≥n..."
            return $true
        }
        
        default {
            Write-Error "Modo de ejecuci√≥n desconocido: $ExecutionMode"
            return $false
        }
    }
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "Aplicaci√≥n ejecutada exitosamente"
        return $true
    } else {
        Write-Error "Error durante la ejecuci√≥n (C√≥digo: $LASTEXITCODE)"
        return $false
    }
}

# Funci√≥n para mostrar informaci√≥n del sistema
function Show-SystemInfo {
    Write-Header "INFORMACI√ìN DEL SISTEMA"
    
    Write-Host "`nüìä ESTADO DEL PROYECTO:" -ForegroundColor Yellow
    
    # Informaci√≥n de Python
    try {
        $pythonVersion = python --version 2>&1
        Write-Success "Python: $pythonVersion"
    } catch {
        Write-Error "Python: No disponible"
    }
    
    # Informaci√≥n del entorno virtual
    if (Test-Path ".venv") {
        Write-Success "Entorno Virtual: Configurado"
    } else {
        Write-Warning "Entorno Virtual: No configurado"
    }
    
    # M√≥dulos del proyecto
    $modules = @(
        "src\config\settings.py",
        "src\core\geometry.py", 
        "src\core\stress_analysis.py",
        "src\core\fea_solver.py",
        "src\gui\main_window.py",
        "src\utils\logging_config.py",
        "src\utils\validators.py",
        "src\utils\unit_converter.py"
    )
    
    Write-Host "`nüîß M√ìDULOS PROFESIONALES:" -ForegroundColor Yellow
    foreach ($module in $modules) {
        if (Test-Path $module) {
            $size = (Get-Item $module).Length
            Write-Success "$(Split-Path $module -Leaf): $('{0:N0}' -f $size) bytes"
        } else {
            Write-Error "$(Split-Path $module -Leaf): No encontrado"
        }
    }
    
    # Informaci√≥n de dependencias
    if (Test-Path "requirements.txt") {
        $requirements = Get-Content "requirements.txt" | Where-Object { $_ -notmatch "^#" -and $_ -ne "" }
        Write-Host "`nüì¶ DEPENDENCIAS REQUERIDAS:" -ForegroundColor Yellow
        foreach ($req in $requirements) {
            Write-Info $req
        }
    }
    
    Write-Host "`nüéØ CARACTER√çSTICAS:" -ForegroundColor Yellow
    Write-Success "‚úÖ Arquitectura modular profesional"
    Write-Success "‚úÖ An√°lisis seg√∫n normas AASHTO"
    Write-Success "‚úÖ Engine FEA con scikit-fem"
    Write-Success "‚úÖ Interfaz gr√°fica moderna"
    Write-Success "‚úÖ Sistema de logging avanzado"
    Write-Success "‚úÖ Validaci√≥n autom√°tica"
    Write-Success "‚úÖ Conversi√≥n de unidades"
    Write-Success "‚úÖ Testing framework integrado"
}

# Funci√≥n para mostrar ayuda
function Show-Help {
    Write-Header "AYUDA - DOVELA DIAMANTE LAUNCHER"
    
    Write-Host @"

üìñ USO:
   .\run_app.ps1 [MODO] [OPCIONES]

üéØ MODOS DISPONIBLES:
   gui      - Interfaz gr√°fica (por defecto)
   console  - Modo consola para testing
   test     - Ejecutar pruebas de validaci√≥n
   legacy   - Aplicaci√≥n original
   help     - Mostrar esta ayuda

‚öôÔ∏è  OPCIONES:
   -Verbose - Mostrar informaci√≥n detallada
   -NoVenv  - No usar entorno virtual

üìù EJEMPLOS:
   .\run_app.ps1                    # Men√∫ interactivo
   .\run_app.ps1 gui                # Interfaz gr√°fica directa
   .\run_app.ps1 console -Verbose   # Consola con detalles
   .\run_app.ps1 test               # Ejecutar pruebas

üîß RESOLUCI√ìN DE PROBLEMAS:
   - Aseg√∫rese de que Python est√© instalado
   - Verifique que las dependencias est√©n instaladas
   - Use -Verbose para informaci√≥n detallada
   - Ejecute como administrador si hay problemas de permisos

"@ -ForegroundColor Cyan
}

# ============================================================================
# FUNCI√ìN PRINCIPAL
# ============================================================================

function Main {
    try {
        # Configurar pol√≠tica de ejecuci√≥n si es necesario
        if ((Get-ExecutionPolicy) -eq "Restricted") {
            Write-Warning "Pol√≠tica de ejecuci√≥n restrictiva detectada"
            Write-Info "Ejecute: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser"
        }
        
        # Mostrar ayuda si se solicita
        if ($Mode -eq "help") {
            Show-Help
            return
        }
        
        # Verificar dependencias
        if (-not (Test-Dependencies)) {
            Write-Error "Verificaci√≥n de dependencias fall√≥"
            return
        }
        
        # Configurar entorno
        if (-not (Initialize-VirtualEnvironment)) {
            Write-Error "Error al configurar entorno virtual"
            return
        }
        
        # Determinar modo de ejecuci√≥n
        $executionMode = $Mode
        if ($Mode -eq "menu") {
            $executionMode = Show-InteractiveMenu
        }
        
        # Ejecutar aplicaci√≥n
        if ($executionMode -ne "exit") {
            $success = Start-Application -ExecutionMode $executionMode
            
            if ($success) {
                Write-Host "`n" -NoNewline
                Write-Success "Operaci√≥n completada exitosamente"
            } else {
                Write-Host "`n" -NoNewline
                Write-Error "La operaci√≥n fall√≥"
            }
        }
        
        # Mensaje final
        Write-Host "`nüìã Para m√°s informaci√≥n, ejecute: .\run_app.ps1 help" -ForegroundColor Gray
        
    } catch {
        Write-Error "Error inesperado: $($_.Exception.Message)"
        Write-Info "Stack trace: $($_.ScriptStackTrace)"
    }
}

# Ejecutar funci√≥n principal
Main

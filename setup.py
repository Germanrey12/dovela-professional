#!/usr/bin/env python3
"""
Script de instalaci√≥n y configuraci√≥n para la aplicaci√≥n de dovelas diamante
"""
import sys
import subprocess
import os
from pathlib import Path

def check_python_version():
    """Verifica que la versi√≥n de Python sea compatible"""
    if sys.version_info < (3, 8):
        print("‚ùå ERROR: Se requiere Python 3.8 o superior")
        print(f"   Versi√≥n actual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro} - Compatible")
    return True

def install_dependencies():
    """Instala las dependencias requeridas"""
    print("\nüì¶ Instalando dependencias...")
    
    try:
        # Actualizar pip
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
        
        # Instalar dependencias del requirements.txt
        requirements_file = Path("requirements.txt")
        if requirements_file.exists():
            subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
            print("‚úÖ Dependencias instaladas correctamente")
        else:
            print("‚ö†Ô∏è Archivo requirements.txt no encontrado")
            
            # Instalar dependencias m√≠nimas
            basic_deps = ["numpy", "scipy", "matplotlib"]
            for dep in basic_deps:
                subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
            
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando dependencias: {e}")
        return False

def create_directories():
    """Crea directorios necesarios"""
    print("\nüìÅ Creando directorios...")
    
    directories = [
        "logs",
        "output",
        "projects",
        "temp"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"   ‚úÖ {directory}/")

def test_installation():
    """Prueba que la instalaci√≥n funcione correctamente"""
    print("\nüß™ Probando instalaci√≥n...")
    
    try:
        # Cambiar al directorio src para imports
        sys.path.insert(0, str(Path("src")))
        
        # Probar imports b√°sicos
        import numpy as np
        import matplotlib.pyplot as plt
        import scipy
        print("   ‚úÖ Dependencias cient√≠ficas")
        
        # Probar m√≥dulos propios
        from config.settings import DEFAULT_SETTINGS
        from utils.validators import DovelaValidator
        print("   ‚úÖ M√≥dulos de configuraci√≥n")
        
        from core.geometry import DiamondDovelaGeometry
        from core.stress_analysis import ClassicalStressAnalyzer
        print("   ‚úÖ M√≥dulos de an√°lisis")
        
        print("‚úÖ Instalaci√≥n verificada correctamente")
        return True
        
    except ImportError as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        return False

def create_launcher_script():
    """Crea script de lanzamiento"""
    print("\nüöÄ Creando script de lanzamiento...")
    
    if os.name == 'nt':  # Windows
        launcher_content = f'''@echo off
cd /d "{Path.cwd()}"
python src\\main.py
pause
'''
        launcher_file = "ejecutar_dovela.bat"
    else:  # Unix/Linux/Mac
        launcher_content = f'''#!/bin/bash
cd "{Path.cwd()}"
python3 src/main.py
'''
        launcher_file = "ejecutar_dovela.sh"
    
    Path(launcher_file).write_text(launcher_content)
    
    if os.name != 'nt':
        # Hacer ejecutable en Unix
        os.chmod(launcher_file, 0o755)
    
    print(f"   ‚úÖ {launcher_file}")

def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("="*60)
    print("CONFIGURACI√ìN DE DOVELA DIAMANTE PROFESSIONAL v2.0")
    print("="*60)
    
    # Verificar Python
    if not check_python_version():
        input("\nPresione Enter para salir...")
        sys.exit(1)
    
    # Instalar dependencias
    if not install_dependencies():
        print("\n‚ùå Error en instalaci√≥n de dependencias")
        input("Presione Enter para salir...")
        sys.exit(1)
    
    # Crear directorios
    create_directories()
    
    # Probar instalaci√≥n
    if not test_installation():
        print("\n‚ùå Error en verificaci√≥n")
        input("Presione Enter para salir...")
        sys.exit(1)
    
    # Crear launcher
    create_launcher_script()
    
    print("\n" + "="*60)
    print("‚úÖ CONFIGURACI√ìN COMPLETADA EXITOSAMENTE")
    print("="*60)
    print("\nPara ejecutar la aplicaci√≥n:")
    print("  Opci√≥n 1: python src/main.py")
    if os.name == 'nt':
        print("  Opci√≥n 2: Doble clic en ejecutar_dovela.bat")
    else:
        print("  Opci√≥n 2: ./ejecutar_dovela.sh")
    
    print("\nModos adicionales:")
    print("  Consola: python src/main.py console")
    print("  Tests:   python src/main.py test")
    
    input("\nPresione Enter para continuar...")

if __name__ == "__main__":
    main()
